# prompt_improvement_agent.py
"""
Prompt Improvement Agent

Purpose:
--------
This agent improves a YAML-based LLM prompt based on structured feedback generated by PromptQualityAgent
and reviewed by ControllerAgent.

Enhancements:
-------------
- Accepts raw issue log (from quality_log/*.json) generated by PromptQualityAgent.
- Applies dimension-specific improvement strategies using placeholder logic.
- Produces both an improved prompt and an explanation log (change rationale).

Expected Input:
---------------
- original_prompt_text: str
- feedback_issues: dict (dimension -> issue text)

Output:
-------
- improved_prompt: str (revised YAML prompt)
- rationale: str (list of changes applied)

#Notes:
- Real improvement logic should use LLM-based transformations.
"""

import json
from typing import Tuple, Dict


class PromptImprovementAgent:
    def __init__(self):
        pass

    def run(
        self, original_prompt: str, feedback_issues: Dict[str, str]
    ) -> Tuple[str, str]:
        """
        Applies improvement instructions to the prompt based on feedback issues.

        Returns:
            - improved_prompt: Updated YAML prompt with notes
            - rationale: Plaintext explanation of applied improvements
        """
        improved_lines = original_prompt.splitlines()
        rationale_lines = []

        improved_lines.append("\n# === IMPROVEMENTS APPLIED ===")

        for dimension, issue in feedback_issues.items():
            rationale = f"[{dimension}] Issue detected: {issue}"
            patch_line = f"# [Fix] {dimension}: {issue}"
            improved_lines.append(patch_line)
            rationale_lines.append(rationale)

        improved_prompt = "\n".join(improved_lines)
        rationale_text = "\n".join(rationale_lines)

        return improved_prompt, rationale_text
